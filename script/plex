#!/usr/bin/env perl

use strict;
use warnings;

use File::Path qw<make_path>;
use File::Basename qw<basename>;
use File::Spec::Functions qw<catfile>;
use Template::Plex;

use JSON;


use Getopt::Long;

my %lex;
my %options;

$options{define}=\%lex;

GetOptions(\%options,
	"define=s",
	"base=s",
	"out=s",			#output dir,
	"template=s",		#template to execute
	"encoder=s",	#How stdin is encoded (ie json. etc)

	"no_include",		#Prevent preprocessing/including
	"root=s",			#Specifiy the root for relative paths

);

die "No templates specified" unless $options{template};

my $base={};
if($options{base}){
	my $json= do { local $/; open my $fh, "<", $options{base} or die "Could not open base file: $options{base}";<$fh>};
	$base=decode_json $json;
	#copy over any cmd argument defines
}
$base->{$_}=$lex{$_} for keys %lex;

#After argument processing, anything remaining are data files.

my $template=plex $options{template}, $base, %options{qw<root no_include>};


if(-t STDIN){
	#take arguments from cmd line options
	die "Output dir not specified" unless $options{out};
	make_path $options{out};
	unless(@ARGV){
		my $rendered=$template->render();
		my $output=basename $options{template}=~s/\.plex$//ri;	#strip the plex extension
		$output=catfile $options{out}, $output; 
		do {
			open my $fh, ">", $output or die "Could not open output file $output";

			print $fh $rendered;
		}
	}
	for my $input (@ARGV){
		print STDERR "Processing $input\n";
		#Remaining args are data files to process
		my $json=do {local $/; open my $fh, "<", $input or die "could not open input file: $input"; <$fh>};
		my $data=decode_json $json;
		my $rendered=$template->render($data);
		
		my $output=basename $input=~s/\.plex$//ri;	#strip the plex extension
		$output=catfile $options{out}, $output;
		#write output to outputdir, stripping the  plex extension if present
		do {
			open my $fh, ">", $output or die "Could not open output file $output";

			print $fh $rendered;
		}
	}
}
else{
	print STDERR "READING FROM STDIN\n";
	my $json="";
	while(<STDIN>){
		$json.=$_;
	}
	my $data=decode_json $json;
	my $output=$template->render($data);

	print STDOUT $output;
}




