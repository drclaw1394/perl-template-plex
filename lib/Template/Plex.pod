=head1 NAME

Template::Plex - (P)erl (L)exical and (EX)tendable Templating

=head1 SYNOPSIS

Write a template:

	#Contents of my_template.plex
	
	@{[ 
	    init {
		use Time::HiRes qw<time>;
		$title="Mr.";
	    }
	]}
	Dear $title Connery,
	Ordered a $size pizza with $slices slices to share between @$people and
	myself.  That averages @{[$slices/(@$people+1)]} slices each.

Use a template
	use Template::Plex;

	my $vars={
		size=>"large",
		slices=>8,
		people=>[qw<Kim Sam Harry Sally>]
	};

	my $template= Template::Plex->load(\*DATA, $vars);

	print $template->render;	


	#OUTPUT
	Dear Mr. Connery,
	Ordered a large pizza with 8 slices to share between Kim, Sam, Harry,
	Sally and myself.  That averages 1.6 slices each.     
	

Change values and render it again:
	$vars->{size}="extra large";
	$vars->{slices}=12;

	print $template->render;


	#OUTPUT
	Dear Mr. Connery,
	Ordered a extra large pizza with 12 slices to share between Kim, Sam,
	Harry, Sally and myself.  That averages 2.4 slices each.


=head1 DESCRIPTION

C<Template::Plex> facilitates the use of perl (not embedded perl) as a template
language. It implements bootstrapping and a system to load, cache,
inherit and render templates with minimal code.

The 'lexical' part of this module refers to the lexical aliasing of input
variables into the template. This reduces the amount of markup required to
reference variables and thus improves the style and readability of a template.

Templates can be extended and reused by way of inheritance and slots. The
template system itself can be extended by sub classing C<Template::Plex> and
implementing customised load routines and other  helper methods

=head1 MOTIATION

Many templating systems are available, yet none use perl as the template
language? Perl already has a great text interpolation, so why not use it? 

Lexical aliasing allows the input variables to be accessed directly by name
(i.e. C<$name>) instead of as a member of a hash ref
(i.e.C<$fields-E<gt>{name}>) or by delimiting with custom syntax (i.e.
C<E<lt>%=name%E<gt>>)



=head1 SYNTAX GENESIS

=head2 Background Basics

We all know how to interpolate variables in to a string in perl:
	
	"This string $uses a $some{variables}"

But how can we easily interpolate a statement, function or method call? We can
use the C<@{[]}> construct:

	"This is a perl string interpolating @{[ map uc, qw<a b c d>]}"

If we need more statements, we can combine with a C<do> statement:

	"This is a perl string interpolating 
	@{[ do {
		my $result="STATEMENTS";
		...
		lc $result;
		}
	]}
	"

=head2 Look, a Template!

Combining the above examples, we make a C<Template::Plex> template simply by
removing the outer quoting operators:


	This string $uses a $some{variables}

	This is a perl string interpolating @{[ map uc, qw<a b c d>]}

	This is a perl string interpolating 
	@{[ do {
		my $result="STATEMENTS";
		lc $result;
		}
	]}

A C<Template::Plex> template is just perl! The above is the literal text you
can save to a file and load as a template.

Specifically, it is the subset of perl that's valid between double quotation
operators. 


=head1 SMART META DATA

Each template has access to it's self, using the C<$self> variable. This comes in very handy when loading sub templates


Templates can include an C<init{}> block at the beginning which executed (only
once) during the setup state of the template.  In some ways this is similar to
Jekyll 'Front Matter', but more powerful. You can manipulate input variables,
define helper subroutines, or import a  module:

	@{[ init {
		use Time::HiRes qw<time>;

		sub my_func{ 1+2 };
		}
	]}

	Calculated @{[my_func]} at @{[time]}

The C<init> block does not inject any content into a template, but manipulates
the state of a template.

=head1 EXECUTING A TEMPLATE


There are a few ways of executing a template from your application. Each of
them are accessible via class methods:

	my $template=Template::Plex->load(...);		#Load a template

	my $template=Template::Plex->cache(...);	#Load a template from cache

	my $resulte= Template::Plex->immediate(...);	#Load from cache and render now


A C<load> call returns a new template object each time, where a C<cache> call
returns a template already loaded (or loads it once), for a user defined key.

The C<immediate> call uses a cached template and immediately renders it
returning the results into the current template.

The API section details the use of these methods fully.

=head1 TEMPLATE REUSE

Reusing templates can reduce the repetitive nature of content and
C<Template::Plex> supports three forms of template reuse
	
=head2 Sub Templates

Theses are similar to 'partials' in other template languages. In
C<Tempalte::Plex> a sub template is just another template. Templates can load
templates.

While you can load a sub template with a class method as above, it's not
recommended. (You will need to specify all the variables and options again...)

A better way is to call the same method on the C<$self> object:
	
	@{[$self->load(...)]}
	@{[$self->cache(...)]}
	@{[$self->immediate(...)]}

This will automatically link the variables and relevant option to be the same
as the current template.

Better still, these methods made available within a template simply as a subroutine call:

	@{[load ... ]}
	@{[cache ... ]}
	@{[immediate ...]}


=head2 Slots

A sub template can be used at any location within a template. However there are
special locations called slots. These are defined with the C<slot> directive:

	@{[slot slot1=>"some text"]}

	@{[slot slot_abc=> cache "sub template"]}

	@{[slot]}

The slot name can be any string and the value can either be text or a template
object.

The 'default' is special and is the location at which a child template will be
rendered. (more on child/parent/inheritance in the next section).

A child template can also indicate it wants to fill other slots in the parent.

This is done with the C<fill_slot> directive:

	@{[fill_slot name=>...]}

This will override the parent slot with the text or template specified by the child.


=head2 Template Inheritance

A template (child) can inherit content from another template (parent) using the
C<inherit> subroutine inside a C<init> block:

	@{[ init {
		inherit "my_parent.plex";


		}
	]}

	The body of the child will be rendered into  parents default slot

	@{[fill_slot another=>"this text will override parent slot"]}


=head2 Example

The following example shows a child template inheriting from a parent. The
child will provide content to the default slot in the parent. It also overrides
the header slot in the parent with another template which it loads:

Parent Template:

	@{[slot header=>"==HEADER=="]}
	More parent content...
	@{[slot]}
	@{[slot footer=>"==FOOTER=="]}

Sub template (header):

	-=-=-=Fancy header=-=-=-

Child template1:

	@{[ init {
		
		inherit "parent.plex";
	    }
	]}

	@{[slot header=> load "header.plex";
	This content will render into default slot

=head1 LOGGING AND ERROR HANDLING

As templates are executed, they may throw an exception. If a syntax error or
file can not be red, an exception is also thrown. 

In the case of a syntax error, C<die> is called with a summary of template,
prefixed with line numbers which caused the error. Currently 5 line before and
after the error are included for context.

It is recommended to use a try/catch block to process the errors.

Currently L<Log::ger> combined with C<Log::OK> is utilised for logging and
debugging purposes. This comes in very handy when developing sub classes.


=head1 FILTERS

Unlike other template system, there are no built in filter. However as
C<Template::Plex> is just perl you can use builtin string routines or import
other modules in to your template.

=head1 API


=head2 C<load>

	#Class method. Used by top level applciation
	Template::Plex->load($path,$vars,%opts);

	#Object method. Used within a template
	@{[$self->load($path,$vars, %opts);	

	#Subroutine. Prefered within a template. 
	@{[load $path, $vars, %opts]}			
	
	
A factory method, returning a new instance of a template, loaded from a scalar,
file path or an existing file handle. 

From a top level user application, the class method must be used. From within a
template, either the object method form or subroutine form can be used.


Arguments to this function:


=over 

=item C<$path>

This is a required argument.

If C<$path> is a string, it is treated as a file path to a template file. The
file is opened and slurped with the content being used as the template.

If C<$path> is a filehandle, or GLOB ref, it is slurped with the content being
used as the template. Can be used to read template stored in C<__DATA__> for
example

If C<$path> is an array ref, the items of the array are joined into a string,
which is used directly as the template.



=item C<$variables_hash>

This is an optional argument but if present must be an empty hash ref C<{}> or
C<undef>.

The top level items of the C<$variables_hash> hash are aliased into the
template using the key name (key names must be valid for a variable name for
this to operate). This allows an element such as C<$fields{name>}> to be
directly accessible as C<$name> in the template and sub templates.

External modification of the items in C<$variable_hash> will be visible in the
template. This is thee primary mechanism change inputs for subsequent renders
of the template.

In addition, the C<$variables_hash> itself is aliased to C<%fields> variable
(note the %) and directly usable in the template like a normal hash e.g.
C<$fields{name}>

If the C<$variables_hash> is an empty hash ref C<{}> or C<undef> then no
variables will be lexically aliased. The only variables accessible to the
template will be via the C<render> method call.

=item C<%options>

These are non required arguments, but must be key value pairs when used.

Options are stored lexically for access in the template in the variable
C<%options>. This variable is automatically used as the options argument in
recursive calls to C<plex> or C<plx>, if no options are provided.


Currently supported options are:


=over

=item B<root>

C<root> is a directory path, which if present, is prepended to to the C<$path>
parameter if C<$path> is a string (file path).


=item B<no_include>

Disables the uses of the preprocessor include feature. The template text will
not be scanned  and will prevent the C<include> feature from operating.
See C<include> for more details

This doesn't impact recursive calls to C<plex> or C<plx> when dynamically/conditionally
loading templates.

=item C<no_init_fix>

Disables correcting missing init blocks.

If not specified or false, a template file is scanned for a C<@{[init{..}]}>
directive. If one is found, the template is not modified. Otherwise, a 'null'
block is added at the beginning of the template.

The added block is not effected by the enabling/disabling of block fix
mechanism.


=item B<no_block_fix>

Disables removing of EOL after a C<@{[]}> when  the closing C<}]> starts on a
new line. Does not effect C<@{[]}> on a single line or embedded with other
text:

	eg	
		
		Line 1
		@{[
			""
		]}		<-- this NL removed by default
		Line 3	
	
In the above example, the default behaviour is to remove the newline after the
closing C<]}> when it is on a separate line. The rendered output would be:


		Line1
		Line3

If block fix was disabled (i.e. C<no_block_fix> was true) the output would be:


		Line1

		Line3



=item B<package>

Specifies a package to run the template in. Any C<our> variables defined in
the template will be in this package.  If a package is not specified, a unique
package name is created to prevent name collisions

=item B<base>

Specifies the base class type of the template. If not specified, templates are
of type C<Template::Plex>. Sub classes must inherit from this class. See
the Sub classing section for more details

=item B<no_alias>

This disables the aliasing of the top level element in the argument hash. All
variables need to be accessed via the C<%fields> hash when this is effect.


=back

=item Return value

The return value is C<Template::Plex> (or subclass) object which can be
rendered using the C<render> methods of that class.

Please refer to L<Template::Plex> for more details.	

=item Example Usage
		my $hash={
			name=>"bob",
			age=>98
		};

		my $template_dir="/path/to/dir";

		my $obj=plex "template.plex", $hash, root=>$template_dir;
		$obj->render;
=back

=back

=head2 C<cache>

	#Class method
	Template::Plex->cache $key, $path, $variables_hash, %options;

	#Object method
	$self->cache $key, $path, $variables_hash, %options;

	#Subroutine
	cache $key, $path, $variables_hash, %options;


This is a wrapper around the C<load> API, to improve performance of sub template loading. The first argument is a key to name the template when loaded. Subsequent calls with the same key will return the already loaded template from a cache.

If called from the top level user application, the cache is shared. 
However templates have their own cache to prevent cross linking.

If no key is provided, then the information about the caller  (including the
line number) is used generate one. This approach allows for a template which
maybe rendered multiple times in a loop, to only be loaded once for example.

=head2 C<immediate>

	#Class method
	Template::Plex->immediate $key, $path, $variables_hash, %options;
	$self->immediate $key, $path, $variables_hash, %options;
	immediate $key, $path, $variables_hash, %options;


Loads and renders a template immediately. Uses the same arguments as C<cache>.
Calls the C<cache> API but also calls C<render> on the returned template.

Returns the result or the rendered template.

=head2 C<include>


	@{[include("path")}]


This is a special directive that replaces the directive with the literal
contents of the file pointed to by path in a similar style to #include in the C
preprocessor. This is a preprocessing step which happens before the template is
prepared for execution. 


If C<root> was included in the options to C<plex>, then it is prepended to
C<path> if defined.

When a template is loaded by C<plex> the processing of this is
subject to the C<no_include> option. If C<no_include> is specified, any
template text that contains the C<@{[include("path")}]> text will result in a
syntax error

=head2 pl

=head2 block

	@{[ block { ... } ]}

		# or 

	@{[ pl { ... }	]}

A subroutine which executes a block just like the built in  C<do>. However it
always returns an empty string.

Only usable in a template C<@{[]}> construct, to execute arbitrary statements.
However, as an empty string is returned, perl's interpolation won't inject
anything at that point in the template.

If you DO want the last statement returned into the template, use the built in
C<do>.

	eg
		
		@{[
			# This will assign a variable for use later in the template
			# but WILL NOT inject the value 1 into template when rendered
			pl {
				$i=1;
			}

		]}


		@{[
			# This will assign a variable for use later in the tamplate
			# AND immediately inject '1' into the template when rendered
			do {
				$i=1
			}

		]}

=head2 init

	@{[ init {...} ]}


It is used to configure or setup meta data for a template and return
immediately. It takes a single argument which is a perl block.

Only the first C<init {...}> block in a template will be executed.

A C<init {...}> block is executed once, even when the template is rendered
multiple times

Before the block is run, the C<pre_init> method is called.
After the block is run, the C<post_init> method is called.

After the initialisation stages have run, a initialisation flag is set and the
remainder on the template is skipped with the C<skip> method.

This means only the first C<init> block in a template will be executed

=head2 pre_init

Do not call this directly. It is called internally by an init block.
Implemented as an empty method designed to be overridden in a subclass.


=head2 post_init

Do not call this directly. It is called internally by an init block.
Implemented as an empty method designed to be overridden in a subclass.




=head2 inherit

	@{[ init {
		inherit "Path to template";
		}
	]}

Specifies the template which will is the current template's parent. The
current template will be rendered into the default slot of the parent.


=head2 slot

	@{[slot name=>$value]}

Declares a slot in a template which can be filled by a child template calling
C<fill_slot> directives.

C<name> is the name of the slot to render into the template. If not specified,
the slot is the default slot which will be rendered by the content of a child
template.

C<$value> is optional and is the default content to render in the case a child
does not provide data for the slot. It can be a scalar value or a template
loaded by C<load> or C<cache>


=head2 fill_slot

	@{[fill_slot name=>$value]}

Fills an inherited slot of name C<name> with C<$value>. 

The default slot cannot be specified. It is filled with the rendered result of
the child template.

=head2 clear

	clear;

B<Subject to change>.  Clears the cached templates


=head2 jmap

	jmap {block} $delimiter, @array

Performs a join using C<$delimiter> between each item in the C<@array> after
they are processed through C<block>

Very handy for rendering lists:

	eg
		<ul>
			@{[jmap {"<li>$_</li>"} "\n", @items]}
		</ul>

Note the lack of comma after the block.

=head2 C<skip>

Causes the template to immediately finish, with an empty string as result.
From within a template, either the class method or template directive can be used:

	@{[$self->skip]}
	@{[skip]}


=head2 C<meta>

Returns the options hash used to load the template.  From within a template, it
is recommended to use the C<%options> hash instead:

	@{[$self->meta->{file}]}
		or
	@{[$options{file}]}

This can also be used outside  template text to inspect a templates meta information

	$template->meta;

=head2 C<args>

Returns the argument hash used to load the template.  From within a template,
it is recommended to use the aliased variables or the C<%fields> hash instead:

	@{[$self->args->{my_arg}]}
		or
	@{[$fields{my_arg}]}

		or
	$my_arg


This can also be used outside template text to inspect a templates input variables

	$template->args;

=head2 parent

	$self->parent;

Returns the parent template.

=head2 render

	$template->render($fields);

This object method renders a template object created by C<load> into
a string. It takes an optional argument C<$fields> which is a reference to a
hash containing field variables. C<fields> is aliased into the template as
C<%fields> which is directly accessible in the template

	eg
		my $more_data={
			name=>"John",
		};

		my $string=$template->render($more_data);
		
		#Template:
		My name is $fields{John}

Note that the lexically aliased variables setup in C<load> are independent to
the C<%fields> variable and can both be used simultaneously in a template


=head1 SUB CLASSING

Sub classing is as per the standard perl C<use parent>. The object storage is
actually an array.  

Package constants are defined for the indexes of the fields along with
C<KEY_OFFSET> and C<KEY_COUNT> to aid in adding extra fields in sub classes.

If you intend on adding additional fields in your class you will need to do the
following as the object

	use parent "Template::Plex";

	use constant KEY_OFFSET=>Template::Plex::KEY_OFFSET+ Template::Plex::KEY_COUNT;

	use enum ("first_field_=".KEYOFFSET, ..., last_field_);
	use constant  KEY_COUNT=>last_field_ - first_field_ +1;

Any further sub classing will need to repeat this using using your package name.


=head1 FEATURE CHEAT SHEET

=over

=item * Templates can contain a initialisation state

	@{[
		init {
			# Nomral perl code here will only execute once
			# when templates is loaded
		}
	]}


=item * Templates can cache at caller location

	Sub/template is loaded only the first time in this map/loop

	@{[map {immediate undef, "path_to_template",{}} qw< a b c d e >]}
	
	And rendereds serveral times
		

=item * Lexical and package variables accessed/created within templates

	@{[
		init {
			$input_var//=1; #set default
		}

	}]
	
	Value is $input_var;

=item * Call and create subroutines within templates:

	@{[
		init {
			sub my_great_calc {
				my $input=shift;
				$input*2/5;
			}
		}

	}]

	Result of calculation: @{[my_great_calc(12)]}

=item * 'Include' Templates within templates easily:
	
	@{[include("path_to_file")]}

=item * Recursive sub template loading
	
	@{[load "path_to_sub_template"]}

=item * Conditional rendering

	@{[ $flag and $var]}

	@{[ $flag?$var:""]}
	
	@{[
		pl {
			if($flag){
				#do stuff	
			}
		}
	]}

=item * Lists/Loops/maps
	
	template interpolates @$lists directly
	
	Items that are ok:
	 @{[
	 	do {
			#Standard for loop
			my $output;
			for(@$items){
				$output.=$_."\n" if /ok/;
			}
			$output;
		}
	}]

	More ok items:
	@{[map {/ok/?"$_\n":()} @$items]}

	

=item * C<use> other modules directly in templates:

	@{[
		init {	
			use Time::HiRes qw<time>
		}
	]}

	Time of day right now: @{[time]}

=back



=head1 TIPS ON USAGE

=head2 Potential Pitfalls

=over 

=item * Remeber to set C<$"> locally to your requied seperator

The default is a space, however when generating HTML lists for example,
a would make it easier to read:

	#Before executing template
	local $"="\n";

	plex ...

Or alternatively use C<jmap> to explicitly set the interpolation separator each time

=item * Aliasing is a two way steet

Changes made to aliased variables external to the template are available inside
the template (one of the main tenets of this module)

Changes make to aliased variables internal to the template are available outside
the template.

=item * Unbalanced Delimiter Pairs

Perl double quote operators are smart and work on balanced pairs of delimiters.
This allows for the delimiters to appear in the text body without error.

However if your template doesn't have balanced pairs (i.e. a missing "}" in
javascript/c/perl/etc), the template will fail to compile and give a strange
error.

If you know you don't have balanced delimiters, then you can escape them with a
backslash

Currently L<Template::Plex> delimiter pair used is B<{ }>.  It isn't changeable in
this version.

=item  * Are you sure it's one statement?

If you are having trouble with C<@{[...]}>, remember the result of the last
statement is returned into the template.

Example of single statements

	@{[time]}			#Calling a sub and injecting result
	@{[$a,$b,$c,time,my_sub]}	#injecting list
	@{[our $temp=1]}		#create a variable and inject 
	@{[our ($a,$b,$c)=(7,8,9)]}	#declaring a

If you are declaring a package variable, you might not want its value injected
into the template at that point.  So instead you could use C<block{..}>  or
C<pl{..}> to execute multiple statements and not inject the last statement:

	@{[ pl {our $temp=1;} }];

=item * Last newline of templates are chomped

Most text editors insert a newline as the last character in a file.  A chomp is
performed before the template is prepared to avoid extra newlines in the output
when using sub templates. If you really need that newline, place an empty line
at the end of your template

=back

=head2  More on Input Variables

If the variables to apply to the template completely change (note: variables
not values), then the aliasing setup during a C<plex> call will not
reflect what you want.

However the C<render> method call allows a hash ref containing values to be
used.  The hash is aliased to the C<%fields> variable in the template.

	my $new_variables={name=>data};
	$template->render($new_variables);

However to use this data the template must be constructed to access the fields
directly:

	my $template='my name is $fields{name} and I am $fields{age}';

Note that the C<%field> is aliased so any changes to it is reflected outside
the template

Interestingly the template can refer to the lexical aliases and the direct
fields at the same time. The lexical aliases only refer to the data provided at
preparation time, while the C<%fields> refer to the latest data provided during
a C<render> call:

	my $template='my name is $fields{name} and I am $age

	my $base_data={name=>"jimbo", age=>10};

	my $override_data={name=>"Eva"};

	my $template=plex $template, $base_data;

	my $string=$template->render($override_data);
	#string will be "my name is Eva and I am 10

As an example, this could be used to 'template a template' with global, slow
changing variables stored as the aliased variables, and the fast changing, per
render data being supplied as needed.


=head2 Security

This module uses C<eval> to generate the code for rendering. This means that
your template, being perl code, is being executed. If you do not know what is
in your templates, then maybe this module isn't for you.

Aliasing means that the template has write access to variables outside of it.
So again if you don't know what your templates are doing, then maybe this
module isn't for you


=head1 ISSUES 

Debugging templates could be much better

Unless specifically constructed to write to file, templates are completely
processed in memory.

C<plx> caching will not be effective with literal templates unless they are
stored in an anonymous array.
	


=head1 SEE ALSO

Yet another template module right? 

Do a search on CPAN for 'template' and make a cup of coffee.

=head1 REPOSITORY and BUG REPORTING

Please report any bugs and feature requests on the repo page:
L<GitHub|http://github.com/drclaw1394/perl-template-plex>

=head1 AUTHOR

Ruben Westerberg, E<lt>drclaw@mac.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2022 by Ruben Westerberg

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, or under the MIT license

=cut
